#version 430 core

layout(location = 0) out vec3 fragColor;
layout(location = 1) out vec3 bloomColor;

layout(std140, binding = 1) uniform Sun
{
	vec3 sunDir;
	vec3 sunAmbient;
	vec3 sunDiffuseAndSpecular;
	vec3 skyColor;
};
layout(std140, binding = 4) uniform carLishts
{
	vec3 carLightPos[1024];
};
layout(std140, binding = 5) uniform CarLishtShadow
{
	mat4 carLightShadowMat[1024];
};
layout(std430, binding = 6) buffer CarLishting
{
	int lightIdx[12288];
};

in vec3 modelPos;
in vec3 viewRay;
in vec3 aNormal;
in flat int aMaterialIdx;
in flat vec3 carColor;
in flat int instanceId;

struct Material
{
	vec3 ambientAndDiffuse;
	vec3 specular;
	int shininess;
};
uniform Material materials[7];
layout(binding = 1) uniform sampler2DArrayShadow shadowTex;
uniform float fogDensity;

void main()
{
	Material material;
	if(aMaterialIdx < 0)
	{
		material.ambientAndDiffuse = carColor;
		material.shininess = 0;
	}
	else
	{
		material = materials[aMaterialIdx];
	}
	vec3 color = material.ambientAndDiffuse;
	float maxColor = max(max(color.r, color.g), color.b);
	if(maxColor <= 1.0)
	{
		vec3 lighting = sunAmbient;
		int lightingOffset = instanceId * 24;
		int end = lightingOffset + 1 + lightIdx[lightingOffset];
		for(int i = lightingOffset + 1; i < end; i++)
		{
			int idx = lightIdx[i];
			vec3 modelToLight = modelPos - carLightPos[idx];
			float lightDistance = length(modelToLight);
			modelToLight /= lightDistance;
			float intensity = -dot(modelToLight, aNormal) / (lightDistance * lightDistance);
			vec4 modelPosLight = carLightShadowMat[idx] * vec4(modelPos, 1.0);
			modelPosLight.xy /= modelPosLight.w;
			float r2 = dot(modelPosLight.xy, modelPosLight.xy);
			if(lightDistance > 45 && intensity > 0 && -modelPosLight.w < modelPosLight.z && modelPosLight.z < modelPosLight.w && r2 < 0.99)
			{
				if(material.shininess > 0)
				{
					vec3 havfway = normalize(-modelToLight + normalize(viewRay));
					float HdotN = dot(havfway, aNormal);
					if(HdotN > 0)
					{
						intensity += pow(HdotN, material.shininess);
					}
				}
				if(r2 > 0.84)
				{
					float t = (0.99 - r2) / 0.15;
					intensity *= (3 - 2 * t) * t * t;
				}
				int layer = findMSB((idx >> 3) * 3 + 1) >> 1;
				ivec2 cnt = ivec2(2 << layer, 4 << layer);
				idx -= ((8 << (2 * layer)) - 8) / 3 ;
				vec2 shadowMapPos = vec2(idx % cnt.x, idx / cnt.x) / cnt;
				modelPosLight.xy = (modelPosLight.xy + 1.0) / (2 * cnt) + shadowMapPos;
				modelPosLight.w = 0.5 * (modelPosLight.z / modelPosLight.w + 1.0);
				modelPosLight.z = layer;
				intensity *= texture(shadowTex, modelPosLight).x;
				const vec3 carLightColor = vec3(1.0, 1.0, 0.9) * 500000;
				lighting += intensity * carLightColor;
			}
		}
		color *= lighting;
	}

	float temp = fogDensity * fogDensity * dot(viewRay, viewRay);
	float fogFactor = exp(-temp * temp);
	color = fogFactor * color + (1.0 - fogFactor) * skyColor;
	fragColor = color;
	bloomColor = maxColor > 1 ? color : vec3(0.0);
}