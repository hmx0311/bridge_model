#version 430 core

layout(triangles) in;

layout(triangle_strip, max_vertices = 111) out;
out float gl_ClipDistance[4];

in vec3 aNormal[];
in int instanceId[];

layout(std140, binding = 5) uniform CarLishtShadow
{
	mat4 carLightShadowMat[1024];
};
layout(std430, binding = 6) buffer CarLishting
{
	int lightIdx[12288];
};

void main()
{
	int lightingOffset = instanceId[0] * 24;
	int end = lightingOffset + 1 + lightIdx[lightingOffset];
	for(int i = lightingOffset + 1; i < end; i++)
	{
		int idx = lightIdx[i];
		int layer = findMSB((idx >> 3) * 3 + 1) >> 1;
		if(layer >= 4)
		{
			continue;
		}
		vec4 pos[3];
		vec3 test[3];
		for(int j = 0; j < 3; j++)
		{
			pos[j] = carLightShadowMat[idx] * gl_in[j].gl_Position;
			test[j]= pos[j].xyz / pos[j].w;
		}
		vec3 projNoraml = cross(test[1] - test[0], test[2] - test[0]);
		if(pos[0].z >= pos[0].w && pos[1].z >= pos[1].w && pos[2].z >= pos[2].w || projNoraml.z * pos[0].w * pos[1].w * pos[2].w <= 0)
		{
			continue;
		}
		float offsetScale = 0.002 * (1 << layer) * sqrt(dot(projNoraml.xy, projNoraml.xy) / (projNoraml.z * projNoraml.z));
		pos[0].z += offsetScale * pos[0].w;
		pos[1].z += offsetScale * pos[1].w;
		pos[2].z += offsetScale * pos[2].w;
		bool surroundTest[3] = { (test[0].x * test[1].y - test[0].y * test[1].x) * pos[2].w > 0,
								(test[1].x * test[2].y - test[1].y * test[2].x) * pos[0].w > 0,
								(test[2].x * test[0].y - test[2].y * test[0].x) * pos[1].w > 0 };
		bool isIn = surroundTest[0] == surroundTest[1] && surroundTest[0] == surroundTest[2];
		for(int j = 0; j < 3 && !isIn; j++)
		{
			vec2 a = test[j].xy;
			int j2 = (j + 1) % 3;
			vec2 v = test[j2].xy - a;
			float lt2 = dot(a, a);
			if(pos[j2].w < 0)
			{
				if(pos[j].w < 0)
				{
					continue;
				}
				lt2 = min(lt2, 1.0);
				v = -v;
			}
			else if(pos[j].w < 0)
			{
				lt2 = min(lt2, 1.0);
				a = test[j2].xy;
			}
			float t = v.x * a.y - v.y * a.x;
			isIn = lt2 < 1.0 || dot(v, a) < 0 && dot(v, v) > max(t * t, lt2 - 1);
		}
		if(isIn)
		{
			ivec2 cnt = ivec2(2 << layer, 4 << layer);
			idx -= ((8 << (2 * layer)) - 8) / 3 ;
			vec2 shadowMapPos = vec2(idx % cnt.x, idx / cnt.x) / (0.5 * cnt) - 1.0;
			for(int j = 0; j < 3; j++)
			{
				gl_Position = pos[j];
				gl_ClipDistance[0] = gl_Position.w + gl_Position.x;
				gl_ClipDistance[1] = gl_Position.w - gl_Position.x;
				gl_ClipDistance[2] = gl_Position.w + gl_Position.y;
				gl_ClipDistance[3] = gl_Position.w - gl_Position.y;
				gl_Position.xy = (gl_Position.xy + gl_Position.w) / cnt + shadowMapPos * gl_Position.w;
				gl_Layer = layer;
				EmitVertex();
			}
			EndPrimitive();	
		}
	}
}