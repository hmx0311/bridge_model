#version 430 core

const int CSMLevels = 4;

layout(triangles) in;

layout(triangle_strip, max_vertices = 12) out;

layout(std140, binding = 1) uniform Sun
{
	vec3 sunDir;
};
layout(std140, binding = 2) uniform Shadow
{
	mat4 shadowMat[CSMLevels];
};

void main()
{
	vec3 normal = normalize(cross(gl_in[1].gl_Position.xyz - gl_in[0].gl_Position.xyz, gl_in[2].gl_Position.xyz - gl_in[0].gl_Position.xyz));
	const float texPadding = 0.96;
	float NdotD = dot(normal, sunDir);
	float offsetScale = NdotD > 0 ? 7.0 * sqrt(1 / (NdotD * NdotD) - 1) + 0.01 : 0;
	bool flag = true;
	for(int i = 0; i < CSMLevels && flag; i++)
	{
		float offset = -dot(sunDir, vec3(shadowMat[i][0].z, shadowMat[i][1].z, shadowMat[i][2].z)) * offsetScale * (i + 1);
		flag = false;
		for(int j = 0; j < 3; j++)
		{
			gl_Position = shadowMat[i] * gl_in[j].gl_Position;
			if(gl_Position.x < -texPadding * gl_Position.w || gl_Position.x > texPadding * gl_Position.w || gl_Position.y < -texPadding * gl_Position.w || gl_Position.y > texPadding * gl_Position.w)
			{
				flag = true;
			}
			gl_Position.z += offset;
			gl_Layer = i;
			EmitVertex();
		}
		EndPrimitive();
	}
}