#version 430 core

layout(location = 0) in vec3 vertex;
layout(location = 1) in vec3 normal;
layout(location = 2) in int materialIdx;
layout(location = 3) in mat4 modelMat;
layout(location = 7) in vec3 color;

layout(std140, binding = 0) uniform View
{
	mat4 projectionMat;
	mat4 viewMat;
	mat4 invViewMat;
};

uniform int numLightOnCars;

out vec3 modelPos;
out vec3 modelPosView;
out vec3 viewRay;
out vec3 aNormal;
out flat int aMaterialIdx;
out flat vec3 carColor;
out vec3 pixelOffsetX;
out vec3 pixelOffsetY;
out flat int instanceId;

void main()
{
	modelPos = mat4x3(modelMat) * vec4(vertex, 1.0);
	modelPosView = mat4x3(viewMat) * vec4(modelPos, 1.0);
	viewRay = invViewMat[3].xyz - modelPos;
	aNormal = mat3(modelMat) * normal;
	aMaterialIdx = materialIdx;
	instanceId = gl_InstanceID;
	if(gl_InstanceID < numLightOnCars && materialIdx > 2)
	{
		aMaterialIdx += 2;
	}
	carColor = color;
	gl_Position = projectionMat * vec4(modelPosView, 1.0);
}