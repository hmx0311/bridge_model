#version 430 core

out vec3 fragColor;

layout(std140, binding = 1) uniform Sun
{
	vec3 sunDir;
	vec3 sunAmbient;
	vec3 sunDiffuseAndSpecular;
	vec3 skyColor;
};
layout(std430, binding = 3) buffer CarLishtMap
{
	ivec2 lightIdx[16384];
};
layout(std140, binding = 4) uniform CarLishts
{
	vec3 carLightPos[1024];
};
layout(std140, binding = 5) uniform CarLishtShadow
{
	mat4 carLightShadowMat[1024];
};

in vec3 modelPos;
in vec3 modelPosView;
in vec3 aNormal;
in vec2 aTexCoord;

layout(binding = 0) uniform sampler2D texture0;
layout(binding = 1) uniform sampler2DArrayShadow shadowTex;
uniform float fogDensity;

void main()
{
	vec3 color = texture(texture0, aTexCoord).rgb;
	
	vec3 lighting = sunAmbient;
	const int idxOffsets[9] = { -129, -128, -127, -1, 0, 1, 127, 128, 129 };
	vec3 offsetX = dFdx(modelPos);
	vec3 offsetY = dFdy(modelPos);
	for(int i = 0, j = 0, end = 0; true; j++)
	{
		while(j == end)
		{
			if(i == 9)
			{
				i++;
				break;
			}
			ivec2 lightRange =  lightIdx[int(modelPos.x / 1600 + 64) * 128 + int(modelPos.y / 1600 + 64) + idxOffsets[i]];
			j = lightRange.x;
			end = lightRange.y;
			i++;
		}
		if(i == 10)
		{
			break;
		}
		int layer = findMSB((j >> 3) * 3 + 1) >> 1;
		ivec2 shadowMapSize = ivec2(2 << layer, 4 << layer);
		int shadowMapIdx = j - ((8 << (2 * layer)) - 8) / 3 ;
		vec2 shadowMapPos = vec2(shadowMapIdx % shadowMapSize.x, shadowMapIdx / shadowMapSize.x) / shadowMapSize;
		vec4 modelPosLight = carLightShadowMat[j] * vec4(modelPos, 1.0);
		vec4 OffsetXLight = mat3x4(carLightShadowMat[j]) * offsetX;
		vec4 OffsetYLight = mat3x4(carLightShadowMat[j]) * offsetY;
		const vec2 offsets[4] = { { -0.18, 0.36 }, { 0.36, 0.18 }, { -0.36, -0.18 }, { 0.18, -0.36 } };
		float aveIntensity = 0;
		vec3 modelToLight = modelPos - carLightPos[j];
		for(int k = 0; k < 4; k++)
		{
			vec3 offsetToLight = modelToLight + offsets[k].x * offsetX + offsets[k].y * offsetY;
			float lightDistance = length(offsetToLight);
			offsetToLight /= lightDistance;
			float intensity = -dot(offsetToLight, aNormal) / (lightDistance * lightDistance);
			vec4 coord = modelPosLight + offsets[k].x * OffsetXLight + offsets[k].y * OffsetYLight;
			coord.xy /= coord.w;
			float r2 = dot(coord.xy, coord.xy);
			if(intensity > 0 && -coord.w < coord.z && coord.z < coord.w && r2 < 0.99)
			{
				coord.xy = (coord.xy + 1.0) / (2 * shadowMapSize) + shadowMapPos;
				coord.w = 0.5 * (coord.z / coord.w + 1.0);
				coord.z = layer;
				float shadow = texture(shadowTex, coord).x;
				if(r2 > 0.84)
				{
					float t = (0.99 - r2) / 0.15;
					intensity *= shadow * (3 - 2 * t) * t * t;
				}
				else
				{
					intensity *= shadow;
				}
				aveIntensity += intensity;
			}
		}
		aveIntensity /= 4;
		const vec3 carLightColor = vec3(1.0, 1.0, 0.9) * 500000;
		lighting += aveIntensity * carLightColor;
	}
	color *= lighting;
	
	float temp = fogDensity * fogDensity * dot(modelPosView, modelPosView);
	float fogFactor = exp(-temp * temp);
	fragColor = fogFactor * color + (1.0 - fogFactor) * skyColor;
	return;
}